@* // Copyright (c) 2024 - Jun Dev. All rights reserved *@

@model LoginPageViewModel
@{
	Layout = "_Layout_Login";
	ViewData[Constants.GLOBAL_KEY_TITLE] = _localizer.Globals["Nav_Auth_SignIn"];
}

<div class="background">
	<div class="sign-in">
		<div class="title">
			<div class="logo">
				<img src="@(Url.Content(Constants.SCM_FILE_PATH_PUBLIC_LOGO))" />
			</div>
			<div class="content">
				<h2>@_localizer.Globals["SignIn_Title_SubTitle"]</h2>
			</div>
		</div>
		<form name="sign-in" asp-route="@Constants.MODULE_AUTH_SIGNIN_NAME" method="post">
			<div class="sign-in-form">
				<div class="input-group">
					<input type="text" asp-for="@Model.LoginID" value="@Model.LoginID" placeholder="@_localizer.Globals["SignIn_Field_ID"]" />
					<span class="sign-in-message"></span>
				</div>
				<div class="input-group">
					@await Component.InvokeAsync(Constants.MANAGER_COMPONENT_NAME_PASSWORD_INPUT, new PasswordInputViewModel { Name = "Password", Value = Model.Password })
					<span class="sign-in-message"></span>
				</div>
				<div class="input-group">
					<div class="remember-me">
						<input id="cbRememberMe" asp-for="@Model.RememberMe" type="checkbox" checked="@Model.RememberMe" />
						<label for="cbRememberMe">@_localizer.Globals["SignIn_Label_RememberMe"]</label>
					</div>
					<div class="forget-password">
						<a href="#">@_localizer.Globals["SignIn_Btn_ForgetPassword"]</a>
					</div>
				</div>
				<div class="sign-in-submit">
					<span class="sign-in-message"></span>
					<button type="submit">@_localizer.Globals["SignIn_Btn_Submit"]</button>
				</div>
				<div class="sign-in-register">
					<a href="#">
						@_localizer.Globals["SignIn_Btn_Register"]
					</a>
				</div>
			</div>
		</form>
	</div>
</div>

@section ViewCss {
	<link rel="stylesheet" href="~/css/view/global/auth-sign-in.css" asp-append-version="true" />
}

@section ViewScript {
	<script>
		const initPage = () => {
			const errorMessage = '@ViewData[Constants.VIEWDATA_KEY_AUTH_ERROR_MESSAGE]';
			if (errorMessage) {
				toastr.error(errorMessage);
			}
		};
		StoreWindowLoadCallback.push(initPage);
	</script>
}