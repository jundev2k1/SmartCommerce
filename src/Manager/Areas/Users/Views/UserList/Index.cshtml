@* // Copyright (c) 2024 - Jun Dev. All rights reserved *@

@{
	ViewData[Constants.GLOBAL_KEY_TITLE] = _localizer.Globals["Nav_User_List"];
	ViewData[Constants.GLOBAL_KEY_CURRENT_PAGE] = "UserList_Page";

	var breadcrumbs = new Breadcrumb[]
	{
		new Breadcrumb { Title = _localizer.Globals["Nav_Home"].Value, Href = Constants.MODULE_HOME_HOME_PATH },
		new Breadcrumb { Title = _localizer.Globals["Nav_User_List"].Value, IsDisabled = true }
	};

	var hasResult = Model.PageData.Items.Any();
	var hasData = Model.PageData.TotalPage > 0;
}
@model UserListViewModel

@await Component.InvokeAsync(Constants.MANAGER_COMPONENT_NAME_BREADCRUMB, breadcrumbs)

<section id="searchBar" class="site-card">
	<form id="advanceSearchForm" name="searchForm" asp-route="@Constants.MODULE_USER_USERLIST_NAME" method="post">
		<div class="row g-md-2 gx-1 gy-2">
			<div class="col-md-8 col-12">
				<div class="d-flex gap-1 search-bar-group">
					<div class="flex-grow-1">
						@await Component.InvokeAsync(Constants.MANAGER_COMPONENT_NAME_SEARCH_INPUT, new SearchInputViewModel { Name = "SearchFields.Keywords", Value = Model.SearchFields.Keywords, ClassName = "search-bar-input" })
					</div>
					<button id="btnExport" type="button" class="btn site-btn-outline-info only-desktop" data-bs-toggle="collapse" href="#filterAdvancedCollapse">
						<i class="fa-light fa-filter-list"></i>
						@_localizer.Globals["Btn_Filter"]
					</button>
				</div>
			</div>
			<div class="col-md-4 col-12 d-flex justify-content-end gap-2">
				<button id="btnExport" type="button" class="btn site-btn-outline-info only-mobile" data-bs-toggle="collapse" href="#filterAdvancedCollapse">
					<i class="fa-light fa-filter-list"></i>
					@_localizer.Globals["Btn_Filter"]
				</button>
				@* <button type="button" class="btn site-btn-outline-theme" data-bs-toggle="modal" data-bs-target="#exportModal">
					<i class="fa-light fa-file-export"></i>
					@_localizer.Globals["Btn_Export"]
				</button> *@
				@* <a asp-route="@Constants.MODULE_PRODUCT_PRODUCTREGISTER_NAME" class="btn site-btn-success">
					<i class="fa-light fa-plus"></i>
					@_localizer.Globals["Btn_Create"]
				</a> *@
			</div>
			<div class="col-12">
				<div class="collapse" id="filterAdvancedCollapse">
					<div class="card card-body">
						<h2 class="fs-4">@_localizer.Globals["Title_SearchAdvanced"]</h2>
						<ul class="row g-md-2 gx-1 gy-2">
							<li class="col-md-4 col-6">
								<div class="form-group">
									<label for="userIdForSearch" class="form-label">@_localizer.Fields["User_UserId"]</label>
									<input type="text" class="form-control" id="userIdForSearch" placeholder="@_localizer.Globals["PlaceHolder_SearchWith"] @_localizer.Fields["User_UserId"]...">
								</div>
							</li>
							<li class="col-md-4 col-6">
								<div class="form-group">
									<label for="emailForSearch" class="form-label">@_localizer.Fields["User_Email"]</label>
									<input type="text" class="form-control" id="emailForSearch" placeholder="@_localizer.Globals["PlaceHolder_SearchWith"] @_localizer.Fields["User_Email"]...">
								</div>
							</li>
							<li class="col-md-4 col-6">
								<div class="form-group">
									<label for="statusForSearch" class="form-label">@_localizer.Fields["User_Status"]</label>
									@Html.DropDownListFor(
										model => model.SearchFields.Status,
										Model.InputOption.Status,
										new { Id = "statusForSearch", Class = "form-select" })
								</div>
							</li>
							<li class="col-md-4 col-12">
								<div class="form-group">
									<label for="userNameForSearch" class="form-label">@_localizer.Fields["User_Username"]</label>
									<input type="text" class="form-control" id="userNameForSearch" placeholder="@_localizer.Globals["PlaceHolder_SearchWith"] @_localizer.Fields["User_Username"]...">
								</div>
							</li>
							<li class="col-md-4 col-12">
								<div class="form-group">
									<label for="firstNameForSearch" class="form-label">@_localizer.Fields["User_FirstName"]</label>
									<input type="text" class="form-control" id="firstNameForSearch" placeholder="@_localizer.Globals["PlaceHolder_SearchWith"] @_localizer.Fields["User_FirstName"]...">
								</div>
							</li>
							<li class="col-md-4 col-12">
								<div class="form-group">
									<label for="lastNameForSearch" class="form-label">@_localizer.Fields["User_LastName"]</label>
									<input type="text" class="form-control" id="lastNameForSearch" placeholder="@_localizer.Globals["PlaceHolder_SearchWith"] @_localizer.Fields["User_LastName"]...">
								</div>
							</li>
							<li class="col-12">
								<div class="row g-md-2 gx-1 gy-2">
									<div class="col-md-3 col-12">
										<label for="address1ForSearch" class="form-label">@_localizer.Fields["User_Address1"]</label>
										<select class="form-select select-search-address-1" id="address1ForSearch">
											@if (string.IsNullOrEmpty(Model.SearchFields.Address1) == false)
											{
												<option value="@Model.SearchFields.Address1" selected></option>
											}
										</select>
									</div>
									<div class="col-md-3 col-12">
										<div>
											<label for="address2ForSearch" class="form-label">@_localizer.Fields["User_Address2"]</label>
											<select class="form-select select-search-address-2" id="address2ForSearch" data-parent-id="address1ForSearch">
												@if (string.IsNullOrEmpty(Model.SearchFields.Address2) == false)
												{
													<option value="@Model.SearchFields.Address2" selected></option>
												}
											</select>
										</div>
									</div>
									<div class="col-md-3 col-12">
										<label for="address3ForSearch" class="form-label">@_localizer.Fields["User_Address3"]</label>
										<select class="form-select select-search-address-3" id="address3ForSearch" data-parent-id="address2ForSearch">
											@if (string.IsNullOrEmpty(Model.SearchFields.Address3) == false)
											{
												<option value="@Model.SearchFields.Address3" selected></option>
											}
										</select>
									</div>
									<div class="col-md-3 col-12">
										<label for="address4ForSearch" class="form-label">@_localizer.Fields["User_Address4"]</label>
										<input type="text" class="form-control" id="address4ForSearch" placeholder="@_localizer.Globals["PlaceHolder_SearchWith"] @_localizer.Fields["User_Address"]...">
									</div>
								</div>
							</li>
							<li class="col-md-6 col-12">
								<div class="form-group">
									<label class="form-label">@_localizer.Fields["Product_DateCreated"]</label>
									<div class="d-flex gap-1 align-items-center">
										<input type="datetime" class="form-control datetime-picker" id="dateCreatedFromForSearch" placeholder="@_localizer.Globals["PlaceHolder_From"]...">
										~
										<input type="datetime" class="form-control datetime-picker" id="dateCreatedToForSearch" placeholder="@_localizer.Globals["PlaceHolder_To"]...">
									</div>
								</div>
							</li>
							<li class="col-md-6 col-12">
								<div class="form-group">
									<label class="form-label">@_localizer.Fields["Product_DateChanged"]</label>
									<div class="d-flex gap-1 align-items-center">
										<input type="datetime" class="form-control datetime-picker" id="dateChangedFromForSearch" placeholder="@_localizer.Globals["PlaceHolder_From"]...">
										~
										<input type="datetime" class="form-control datetime-picker" id="dateChangedToForSearch" placeholder="@_localizer.Globals["PlaceHolder_To"]...">
									</div>
								</div>
							</li>
						</ul>
						<div id="searchControl" class="d-flex justify-content-md-end mt-4">
							<div class="group-control w-auto row g-md-2 gx-1 gy-2">
								<div class="form-group col-md-auto col-12">
									<select id="delFlgSearchInput" class="form-select w-auto" aria-label="DeleteFlg">
										<option selected value="false">@_localizer.ValueTexts["ValTxt_DelFlg_Normal"]</option>
										<option value="true">@_localizer.ValueTexts["ValTxt_DelFlg_Deleted"]</option>
									</select>
								</div>
								<div class="form-group col-md-auto col-8">
									<button id="btnSubmitAdvanced" type="submit" class="btn site-btn-theme">
										<i class="fa-light fa-magnifying-glass"></i>
										@_localizer.Globals["Btn_SearchAdvanced"]
									</button>
								</div>
								<div class="form-group col-md-auto col-4">
									<button id="btnResetForm" type="reset" class="btn site-btn-outline-theme" onclick="resetSearchForm('advanceSearchForm')">
										<i class="fa-light fa-arrow-rotate-left"></i>
										@_localizer.Globals["Btn_ResetForm"]
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</form>
</section>
<section id="bodyPageLoad" class="site-card mt-2">
	<div class="row">
		<div class="col-12">
			@await Component.InvokeAsync(Constants.MANAGER_COMPONENT_NAME_DYNAMIC_LIST, new DynamicListViewModel
			{
				DataSource = Model.PageData.Items,
				PlaceholderText = _localizer.Globals["ListPage_NoResult"],
				// Set pagination
				PageInfo = new PageInfo(
					PageIndex: Model.SearchFields.PageNumber,
					PageSize: Model.SearchFields.PageSize,
					SearchCount: Model.PageData.Items.Length,
					SearchHitCount: Model.PageData.TotalRecord,
					TotalPage: Model.PageData.TotalPage),
				RowAttributes = new()
				{
					{ "style", model => $"cursor: pointer;" }
				},
				// Set header rendering
				Columns = new[]
				{
					new CellInfo().SetCell(() => _localizer.Fields["User_UserId"], new { width = "10%" }),
					new CellInfo().SetCell(() => _localizer.Globals["Title_Information"], new { width = "25%" }),
					new CellInfo().SetCell(() => _localizer.Globals["Title_Contact"], new { @class = "text-center only-desktop", width = "45%" }),
					new CellInfo().SetCell(() => _localizer.Fields["User_Sex"], new { @class = "text-center", width = "10%" }),
					new CellInfo().SetCell(() => _localizer.Fields["User_Status"], new { @class = "text-center only-desktop", width = "10%" }),
				},
				// Set body rendering
				Cells = new[]
				{
					// Column: User ID
					new CellInfo().SetCell<UserModel>(model => model.UserId),
					// Column: User information
					new CellInfo().SetCell<UserModel>(async model =>
						$@"<p class='mb-0'>{model.UserName}</p>
							<div class='d-block only-desktop'>
							{
								await ViewUtilities.RenderComponent(
									_viewComponentHelper ,
									Constants.MANAGER_COMPONENT_NAME_CREATED_BY_BADGE,
									new { BranchId = model.BranchId, CreatedBy = model.CreatedBy, DateCreated = model.DateCreated })
							}
						</div>"),
					// Column: User contact information
					new CellInfo().SetCell<UserModel>(model => $@"
						<p class='mb-1'>{model.Email}</p>
						<p class='mb-0'>{model.PhoneNumber}</p>"),
					// Column: User sex
					new CellInfo().SetCell<UserModel>(model => model.Sex,
						attribute: new { @class="text-center" }),
					// Column: User status
					new CellInfo().SetCell<UserModel>(
						model => model.Status,
						attribute: new { @class="text-center" }),
				}
			})
		</div>
	</div>
</section>
@section ViewScript {
	<script type="module">
		import { SearchFormHandler } from "@Url.Content("~/js/common/form/index.js")";

		// Set search advance setting
		const searchAdvanceSetting = {
			btnSearchSelector: '#btnSubmitAdvanced',
			targetSelector: '#searchBar',
			searchUrl: '@Url.RouteUrl(Constants.MODULE_USER_USERLIST_NAME)',
			defaultParameters: {
				'@Constants.REQUEST_KEY_PAGE_NO': '@Model.SearchFields.PageNumber',
				'@Constants.REQUEST_KEY_PAGE_SIZE': '@Model.SearchFields.PageSize',
			},
			searchSettings: [
				{
					selector: '#userIdForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_USER_ID',
				},
				{
					selector: '#emailForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_EMAIL',
				},
				{
					selector: '#statusForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_STATUS',
				},
				{
					selector: '#userNameForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_USERNAME',
				},
				{
					selector: '#firstNameForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_FIRSTNAME',
				},
				{
					selector: '#lastNameForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_LASTNAME',
				},
				{
					selector: '#address1ForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_ADDRESS1',
				},
				{
					selector: '#address2ForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_ADDRESS2',
				},
				{
					selector: '#address3ForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_ADDRESS3',
				},
				{
					selector: '#address4ForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_ADDRESS4',
				},
				{
					selector: '#dateChangedFromForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_DATE_CHANGED_FROM',
				},
				{
					selector: '#dateChangedToForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_DATE_CHANGED_TO',
				},
				{
					selector: '#dateCreatedFromForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_DATE_CREATED_FROM',
				},
				{
					selector: '#dateCreatedToForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_DATE_CREATED_TO',
				},
				{
					selector: '#delFlgForSearch',
					requestKey: '@Constants.REQUEST_KEY_USER_DELETE_FLG',
				},
			],
		};
		StoreWindowLoadCallback.push(() => new SearchFormHandler(searchAdvanceSetting).init());

		// Set search with keyword setting
		const searchKeywordSetting = {
			btnSearchSelector: '#searchBar .search-button',
			targetSelector: '',
			searchUrl: '@Url.RouteUrl(Constants.MODULE_USER_USERLIST_NAME)',
			defaultParameters: {
				'@Constants.REQUEST_KEY_PAGE_NO': '@Model.SearchFields.PageNumber',
				'@Constants.REQUEST_KEY_PAGE_SIZE': '@Model.SearchFields.PageSize',
				'@Constants.REQUEST_KEY_USER_DELETE_FLG': '@Constants.DEFAULT_FLG_OFF',
			},
			searchSettings: [
				{
					selector: '#searchBar .search-input',
					requestKey: '@Constants.REQUEST_KEY_KEYWORD',
				},
			]
		};
		StoreWindowLoadCallback.push(() => new SearchFormHandler(searchKeywordSetting).init());
	</script>
}
